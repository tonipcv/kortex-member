generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                     String    @id @default(cuid())
  name                   String?
  email                  String?   @unique
  emailVerified          DateTime?
  image                  String?
  password               String?
  resetToken             String?
  resetTokenExpiry       DateTime?
  verificationCode       String?
  verificationCodeExpiry DateTime?
  accounts               Account[]
  sessions              Session[]
  courses               Course[]
  blogPosts             BlogPost[]
  profile               UserProfile?
  posts                 Post[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String?
  imageUrl    String?
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model BlogPost {
  id          String   @id @default(cuid())
  title       String
  content     String   @db.Text
  slug        String   @unique
  imageUrl    String?
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model UserProfile {
  id              String    @id @default(cuid())
  userId          String    @unique
  fullName        String
  nickname        String?
  documentId      String?   // Documento de identificação
  birthDate       DateTime?
  phone           String?
  country         String?
  instagram       String?
  youtube         String?
  
  // Novos campos
  avatarUrl       String?   // Imagem de perfil
  coverUrl        String?   // Imagem de capa
  bio             String?   @db.Text  // Sobre mim
  
  // Endereço
  postalCode      String?   // CEP
  address         String?   // Endereço
  addressNumber   String?   // Número
  complement      String?   // Complemento
  state           String?   // Estado
  city            String?   // Cidade
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id          String    @id @default(cuid())
  content     String    @db.Text
  images      String[]  // URLs das imagens
  likes       Int       @default(0)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
}
